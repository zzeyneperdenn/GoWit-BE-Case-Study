// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package server

import (
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Detail string `json:"detail"`
	Status int    `json:"status"`
	Title  string `json:"title"`
}

// TicketResponse defines model for TicketResponse.
type TicketResponse struct {
	Allocation int     `json:"allocation"`
	Desc       *string `json:"desc"`
	Id         int     `json:"id"`
	Name       string  `json:"name"`
}

// CreateTicketsRequestBody defines model for CreateTicketsRequestBody.
type CreateTicketsRequestBody struct {
	Allocation int     `json:"allocation"`
	Desc       *string `json:"desc,omitempty"`
	Name       string  `json:"name"`
}

// PurchaseTicketsRequestBody defines model for PurchaseTicketsRequestBody.
type PurchaseTicketsRequestBody struct {
	Quantity int    `json:"quantity"`
	UserId   string `json:"user_id"`
}

// CreateTicketsJSONBody defines parameters for CreateTickets.
type CreateTicketsJSONBody struct {
	Allocation int     `json:"allocation"`
	Desc       *string `json:"desc,omitempty"`
	Name       string  `json:"name"`
}

// PurchaseTicketsJSONBody defines parameters for PurchaseTickets.
type PurchaseTicketsJSONBody struct {
	Quantity int    `json:"quantity"`
	UserId   string `json:"user_id"`
}

// CreateTicketsJSONRequestBody defines body for CreateTickets for application/json ContentType.
type CreateTicketsJSONRequestBody CreateTicketsJSONBody

// PurchaseTicketsJSONRequestBody defines body for PurchaseTickets for application/json ContentType.
type PurchaseTicketsJSONRequestBody PurchaseTicketsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create an event with an allocation of tickets available to purchase
	// (POST /tickets)
	CreateTickets(w http.ResponseWriter, r *http.Request)
	// Get ticket by id
	// (GET /tickets/{id})
	GetTicketById(w http.ResponseWriter, r *http.Request, id int)
	// Purchase a quantity of tickets from the allocation of the given tickets
	// (POST /tickets/{id}/purchases)
	PurchaseTickets(w http.ResponseWriter, r *http.Request, id int)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Create an event with an allocation of tickets available to purchase
// (POST /tickets)
func (_ Unimplemented) CreateTickets(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get ticket by id
// (GET /tickets/{id})
func (_ Unimplemented) GetTicketById(w http.ResponseWriter, r *http.Request, id int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Purchase a quantity of tickets from the allocation of the given tickets
// (POST /tickets/{id}/purchases)
func (_ Unimplemented) PurchaseTickets(w http.ResponseWriter, r *http.Request, id int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// CreateTickets operation middleware
func (siw *ServerInterfaceWrapper) CreateTickets(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTickets(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTicketById operation middleware
func (siw *ServerInterfaceWrapper) GetTicketById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTicketById(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PurchaseTickets operation middleware
func (siw *ServerInterfaceWrapper) PurchaseTickets(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PurchaseTickets(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/tickets", wrapper.CreateTickets)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tickets/{id}", wrapper.GetTicketById)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/tickets/{id}/purchases", wrapper.PurchaseTickets)
	})

	return r
}
